name: Strapi CI

on: [push, pull_request, workflow_dispatch]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: strapi

defaults:
  run:
    working-directory: strapi

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm ci
      - run: rm -r config/env
      - run: npm run build
        env:
          NODE_ENV: production
      - run: |
          npm run start &
          PID=$!
          curl -s --retry 10 --retry-connrefused http://localhost:1337/ | grep "The server is running successfully."
          curl -s http://localhost:1337/admin | grep "Strapi Admin"
          kill $PID
        env:
          NODE_ENV: production
          APP_KEYS: toBeModified1,toBeModified2
          ADMIN_JWT_SECRET: example-token
          API_TOKEN_SALT: example-salt
          JWT_SECRET: aSecret

  prune-containers:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.event.repository.name }}/${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 5
          ignore-versions: "^main$"

  build-and-push-image:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    outputs:
      meta: ${{ steps.meta.outputs.json }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: strapi
          push: true
          cache-from: type=registry,ref=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          cache-to: type=inline
          no-cache: ${{ github.event_name == 'workflow_dispatch' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
